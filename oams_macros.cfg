[gcode_macro CUT_FILAMENT]

gcode:
    {% set pre_cut_x = printer["gcode_macro _oams_macro_variables"].pre_cut_x %}
    {% set pre_cut_y = printer["gcode_macro _oams_macro_variables"].pre_cut_y %}
    {% set post_cut_x = printer["gcode_macro _oams_macro_variables"].post_cut_x %}
    {% set post_cut_y = printer["gcode_macro _oams_macro_variables"].post_cut_y %}
    {% set pre_cut_speed = printer["gcode_macro _oams_macro_variables"].pre_cut_speed %}
    {% set cut_x = printer["gcode_macro _oams_macro_variables"].cut_x %}
    {% set cut_y = printer["gcode_macro _oams_macro_variables"].cut_y %}
    {% set cut_speed = printer["gcode_macro _oams_macro_variables"].cut_speed %}

    {% if printer.toolhead.homed_axes != 'xyz' %}
        RESPOND TYPE=command MSG='Homing'
        G28
    {% endif %}
    RESPOND TYPE=command MSG='Cutting'
    G0 X{pre_cut_x} Y{pre_cut_y} F{pre_cut_speed}
    G0 X{cut_x} Y{cut_y} F{cut_speed}
    G0 X{post_cut_x} Y{post_cut_y} F{pre_cut_speed}
    M400 ; wait for all moves to end


[gcode_macro SAFE_UNLOAD_FILAMENT]

variable_pause_triggered = False

gcode:
    {% set UNLOAD_SPEED = 1000 %}
    {% set ADDITIONAL_UNLOAD_SPEED = 5000 %}
    {% set ADDITIONAL_TIME_ON = 2.0 %}
    {% set ADDITIONAL_EXTRUSION_AMOUNT = ADDITIONAL_UNLOAD_SPEED / 60.0 * (ADDITIONAL_TIME_ON + 1.0) %}
	{% set retract_length = printer["gcode_macro _oams_macro_variables"].retract_length %}
	{% set extrusion_unload_length = printer["gcode_macro _oams_macro_variables"].extrusion_unload_length %}
	
    OAMSM_FOLLOWER ENABLE=1 DIRECTION=0 FPS=fps1
    G1 E-{retract_length}
    CUT_FILAMENT
    # PARK_MACRO ; uncomment this line if you have a park macro, and rename it to whatever your park macro is called
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=1
    M83
    G1 E-{extrusion_unload_length} F{UNLOAD_SPEED}
    M400
    G4 P100
    {% if fs_extruder_out and printer['filament_switch_sensor extruder_out'].filament_detected %}
    #{% if fs_extruder_out and printer['gcode_button extruder_out'].state == "PRESSED" %}
        RESPOND TYPE=error MSG='Filament detected between extruder and hotend!  This is most likely a failure to cut the filament, or the settings are incorrect and the extrusion_unload_length is insufficient to retract the remaining filament past the gears of the extruder   ... pausing for user intervention'
        PAUSE
    {% else %}
        G1 E-{ADDITIONAL_EXTRUSION_AMOUNT} F{ADDITIONAL_UNLOAD_SPEED}
        # wait 1 second so the extruder is fully to speed
        G4 S1
        OAMSM_UNLOAD_FILAMENT FPS=fps1
        M400
    {% endif %}
    

[gcode_macro _TX]

variable_pause_triggered = False

gcode:
    {% set hotend_meltzone_compensation = printer["gcode_macro _oams_macro_variables"].hotend_meltzone_compensation %}
    {% set retract_length = printer["gcode_macro _oams_macro_variables"].retract_length %}
    {% set extrusion_reload_length = printer["gcode_macro _oams_macro_variables"].extrusion_reload_length %}
    {% set extrusion_unload_length = printer["gcode_macro _oams_macro_variables"].extrusion_unload_length %}
    {% set reload_speed = printer["gcode_macro _oams_macro_variables"].reload_speed %}
    {% set GROUP = params.GROUP %}
    {% set LOADED_GROUP = printer['oams_manager']['fps fps1'].current_group %}
    {% set RELOAD_LENGTH = (extrusion_reload_length + retract_length + hotend_meltzone_compensation) %}
    
    
    # this is a fix for orca slicer's mishandling of change overs during object exclusion
    # Orcas issued a change over of color without first ending the currently excluded object
    # we are now going to ignore change overs if we are ignoring the excluding object
    # because of this bug, the starting color on the next object after exclusionn might not be correct
    {% if printer.toolhead.homed_axes != 'xyz' %}
        RESPOND TYPE=command MSG='Homing'
        G28
    {% endif %}
    {% if printer.exclude_object.current_object not in printer.exclude_object.excluded_objects %}
      {% if LOADED_GROUP == GROUP %}
        RESPOND TYPE=command MSG='Toolhead already loaded with {GROUP}'
      {% elif LOADED_GROUP != GROUP %}
        RESPOND TYPE=command MSG='Switching {LOADED_SPOOL} -> {GROUP}' 
        {% if LOADED_GROUP is not none %}
          SAFE_UNLOAD_FILAMENT
        {% endif %}
        OAMSM_LOAD_FILAMENT GROUP={GROUP}
        M400
        G4 P1000
        _LOAD_FS_IN
        {% if pause_triggered == False %}
          G1 E{RELOAD_LENGTH} F{reload_speed}
          M400
          G4 P1000
          _LOAD_FS_OUT
          {% if pause_triggered == False %}
            # Place all other code after reload here
            SAVE_GCODE_STATE NAME=purge_ready
            G0 Z{15}
            CLEAN_NOZZLE
            RESTORE_GCODE_STATE NAME=purge_ready MOVE=1 MOVE_SPEED=100
          {% endif %}
        {% endif %}
      {% endif %}
    {% endif %}
    
[gcode_macro _LOAD_FS_IN]
gcode:
    {% set fs_extruder_in = printer["gcode_macro _oams_macro_variables"].fs_extruder_in %}
   
    {% if fs_extruder_in and not printer['filament_switch_sensor extruder_in'].filament_detected %}
       RESPOND TYPE=error MSG='Filament not detected at toolhead extruder inlet... pausing for user intervention'
       SET_GCODE_VARIABLE MACRO=_TX VARIABLE=pause_triggered VALUE=True
       PAUSE
    {% elif fs_extruder_in and printer['filament_switch_sensor extruder_in'].filament_detected %} 
        RESPOND TYPE=command MSG='Filament detected at toolhead extruder inlet... continue loading'
    {% endif %}
    
[gcode_macro _LOAD_FS_OUT]
gcode:
    {% set fs_extruder_out = printer["gcode_macro _oams_macro_variables"].fs_extruder_out %}
    
    {% if fs_extruder_out and not printer['filament_switch_sensor extruder_out'].filament_detected %}
        RESPOND TYPE=error MSG='Filament not detected between toolhead extruder and hotend... pausing for user intervention'
        SET_GCODE_VARIABLE MACRO=_TX VARIABLE=pause_triggered VALUE=True
        PAUSE
    {% elif fs_extruder_out and printer['filament_switch_sensor extruder_out'].filament_detected %}
        RESPOND TYPE=command MSG='Filament successfully loaded through extruder... continue'
    {% endif %}

[gcode_macro _UNLOAD_FS_OUT]
gcode:
    {% set fs_extruder_out = printer["gcode_macro _oams_macro_variables"].fs_extruder_out %}
    
    {% if fs_extruder_out and printer['filament_switch_sensor extruder_out'].filament_detected %}
        RESPOND TYPE=error MSG='Filament detected between extruder and hotend!  This is most likely a failure to cut the filament, or the settings are incorrect and the extrusion_unload_length is insufficient to retract the remaining filament past the gears of the extruder   ... pausing for user intervention'
        SET_GCODE_VARIABLE MACRO=SAFE_UNLOAD_FILAMENT VARIABLE=pause_triggered VALUE=True
        PAUSE
    {% elif fs_extruder_out and  not printer['filament_switch_sensor extruder_out'].filament_detected %}
        RESPOND TYPE=command MSG='Filament retracted past extruder... continue'
    {% endif %}

# Usage: OAMS_TORTURE_TEST LOOPS=10
# This macro will load and unload each spool the parameter SPOOL number times
[gcode_macro OAMS_TORTURE_TEST]
gcode:
  {% set num = params.LOOPS|int %}
  {% for i in range(num) %}
       {% for j in range(4) %}
            OAMS_LOAD_SPOOL OAMS=1 SPOOL={j}
            OAMS_UNLOAD_SPOOL OAMS=1
       {% endfor %}
       RESPOND TYPE=command MSG='Number of loops now {i+1}'
  {% endfor %}


# Usage: OAMS_TOOLCHANGE_TORTURE_TEST LOOPS=10
# This macro will load and unload each spool the parameter SPOOL number times
# going through the entire routine of a tool change, including purging the filament
# This is used to ascertain the reliability of the tool change macros
# and toolhead extruder loading and unloading routines
[gcode_macro OAMS_TOOLCHANGE_TORTURE_TEST]
variable_extrusion_amount = 30
variable_extrusion_speed = 300
variable_extrusion_z_height = 100
gcode:
  {% set num = params.LOOPS|int %}
  G0 Z{extrusion_z_height} F30
  {% for i in range(num) %}
       {% for j in range(4) %}
            T{j}
            RESPOND TYPE=command MSG='Purging {extrusion_amount}mm of filament'
       {% endfor %}
       RESPOND TYPE=command MSG='Number of loops now {i+1}'
  {% endfor %}

  
  # The following macros are just placeholders necessary to
# configure up to 16 different toolchanger commands
# if you are using more than 4 ams, you will need to add another
# 4 toolchanges for each additional OAMS

[gcode_macro T0]
gcode:
  _TX GROUP=T0

[gcode_macro T1]
gcode:
  _TX GROUP=T1

[gcode_macro T2]
gcode:
  _TX GROUP=T2

[gcode_macro T3]
gcode:
  _TX GROUP=T3

# enable for 2nd OAMS

#[gcode_macro T4]
#gcode:
#  _TX GROUP=T4

#[gcode_macro T5]
#gcode:
# _TX GROUP=T5

#[gcode_macro T6]
#gcode:
#  _TX GROUP=T6

#[gcode_macro T7]
#gcode:
#  _TX GROUP=T7

#enable for 3rd OAMS

#[gcode_macro T8]
#gcode:
#  _TX GROUP=T8

#[gcode_macro T9]
#gcode:
#  _TX GROUP=T9

#[gcode_macro T10]
#gcode:
#  _TX GROUP=T10

#[gcode_macro T11]
#gcode:
#  _TX GROUP=T11

#enable for 4th OAMS

#[gcode_macro T12]
#gcode:
#  _TX GROUP=T12

#[gcode_macro T13]
#gcode:
#  _TX GROUP=T13

#[gcode_macro T14]
#gcode:
#  _TX GROUP=T14

#[gcode_macro T15]
#gcode:
#  _TX GROUP=T15

# example to enable additional 4 toolchanger commands / colors when using 5 OAMSs

# [gcode_macro T16]
# gcode:
#   _TX GROUP=T16

# [gcode_macro T17]
# gcode:
#   _TX GROUP=T17

# [gcode_macro T18]
# gcode:
#   _TX GROUP=T18

# [gcode_macro T19]
# gcode:
#   _TX GROUP=T19

